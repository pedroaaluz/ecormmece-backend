{"ast":null,"code":"import \"source-map-support/register\";\nimport { v4 as uuidv4 } from 'uuid';\nimport AWS from \"aws-sdk\";\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nexport const main = async event => {\n  const {\n    name,\n    price,\n    description,\n    s3ImageUrl\n  } = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;\n  const params = {\n    TableName: process.env.productsTabledynamodb,\n    Item: {\n      id: uuidv4(),\n      name,\n      price,\n      description,\n      s3ImageUrl,\n      createdAt: Date.now()\n    }\n  };\n\n  try {\n    await dynamoDb.put(params).promise();\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: 'Success in create product',\n        product: params.Item\n      })\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: error.message\n      })\n    };\n  }\n};","map":{"version":3,"sources":["/home/pedroaluz/Documentos/ecormmece/minions-shop/src/newProduct.js"],"names":["v4","uuidv4","AWS","dynamoDb","DynamoDB","DocumentClient","main","event","name","price","description","s3ImageUrl","body","JSON","parse","params","TableName","process","env","productsTabledynamodb","Item","id","createdAt","Date","now","put","promise","statusCode","stringify","message","product","error","console","log"],"mappings":";AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,GAAP,MAAgB,SAAhB;AAEA,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAACE,QAAJ,CAAaC,cAAjB,EAAjB;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAOC,KAAP,IAAiB;AACnC,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA;AAJI,MAKF,OAAOJ,KAAK,CAACK,IAAb,KAAsB,QAAtB,GAAiCC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACK,IAAjB,CAAjC,GAA0DL,KAAK,CAACK,IALpE;AAOA,QAAMG,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADV;AAEbC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAEpB,MAAM,EADN;AAEJO,MAAAA,IAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,WAJI;AAKJC,MAAAA,UALI;AAMJW,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AANP;AAFO,GAAf;;AAYA,MAAI;AACF,UAAMrB,QAAQ,CAACsB,GAAT,CAAaV,MAAb,EAAqBW,OAArB,EAAN;AAEA,WAAO;AACLC,MAAAA,UAAU,EAAE,GADP;AAELf,MAAAA,IAAI,EAAEC,IAAI,CAACe,SAAL,CAAe;AACnBC,QAAAA,OAAO,EAAE,2BADU;AAEnBC,QAAAA,OAAO,EAAEf,MAAM,CAACK;AAFG,OAAf;AAFD,KAAP;AAOD,GAVD,CAUE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO;AACLJ,MAAAA,UAAU,EAAE,GADP;AAELf,MAAAA,IAAI,EAAEC,IAAI,CAACe,SAAL,CAAe;AAACG,QAAAA,KAAK,EAAEA,KAAK,CAACF;AAAd,OAAf;AAFD,KAAP;AAID;AACF,CArCM","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport AWS from \"aws-sdk\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nexport const main = async (event) => {\n  const {\n    name,\n    price,\n    description,\n    s3ImageUrl,\n  } = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;\n\n  const params = {\n    TableName: process.env.productsTabledynamodb,\n    Item: {\n      id: uuidv4(),\n      name,\n      price,\n      description,\n      s3ImageUrl,\n      createdAt: Date.now()\n    },\n  };\n\n  try {\n    await dynamoDb.put(params).promise();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: 'Success in create product',\n        product: params.Item,\n      }),\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({error: error.message}),\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}